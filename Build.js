/* eslint-disable */
const fs = require('fs')
const { spawnSync } = require('child_process')
const path = require('path')
const { dir } = require('console')

const RPFM_PATH = "D:/programs/rpfm shit/"
const SCHEMA_PATH = `C:/Users/admir/AppData/Roaming/rpfm/config/schemas/schema_wh3.ron`
const PROJECT_NAME = `Generic_Paladin_Packs`

spawnSync(`${RPFM_PATH}/rpfm_cli.exe`, [ `--version` ], 
{ encoding: 'utf8', stdio: 'inherit' })

try {
    fs.mkdirSync("build")
    fs.mkdirSync("temp")
} catch (error) {}

if(fs.existsSync("/build")) {
    fs.rmSync("/build", { recursive: true })
}

if(!fs.existsSync("data.pack")) {
    throw `cannot pack! data.pack was not found`
}

function BuildTypescriptProject() {
    console.log(`compiling typescript project`)
    try {
        fs.rmSync(`script/`, { recursive: true })
    } catch (error) { }
    
    const result = spawnSync(`build_campaign.bat`, [], {
        stdio: "inherit",
        encoding: 'utf8'
    })
    if(result.status != 0) throw `fail at compiling typescript project`
}

function InjectResourcesPack() {
    const schemaPath = SCHEMA_PATH.replace(/\\/g, '/')

    if(!fs.existsSync(`build/@autogenerated_${PROJECT_NAME}.pack`)) {
        console.log(`build/@autogenerated_${PROJECT_NAME}.pack not found. creating!`)
        spawnSync(`${RPFM_PATH}/rpfm_cli.exe`, [
            '--game', 'warhammer_3', 
            'pack', 
            `create` , `--pack-path` , `build/@autogenerated_${PROJECT_NAME}.pack`,   
        ], {
            stdio: "inherit",
            encoding: 'utf8'
        })
    } else {
        console.log(`using existing build/@autogenerated_${PROJECT_NAME}.pack!`)
    }

    spawnSync(`${RPFM_PATH}/rpfm_cli.exe`, [
        '--game', 'warhammer_3', 
        'pack', 
        `add`, `--pack-path` , `build/@autogenerated_${PROJECT_NAME}.pack`, 
        `-t`, `${schemaPath}`,
        `--folder-path`, `script;script`
    ], 
    { encoding: 'utf8', stdio: 'inherit' })


   if(!fs.existsSync("data.pack")) {
      throw `cannot update data! items.pack is not found`
   }

   console.log(`extracting items so they can be added...`)
   spawnSync(`${RPFM_PATH}/rpfm_cli.exe`, [
      '--game', 'warhammer_3', 
      'pack', 
      `extract` , `--folder-path`, `/;temp`,
      `--pack-path` , `data.pack`,   
   ], {
      stdio: "inherit",
      encoding: 'utf8'
   })

   console.log(`adding extracted items`)
   spawnSync(`${RPFM_PATH}/rpfm_cli.exe`, [
       '--game', 'warhammer_3', 
       'pack', 
       `add`, `--pack-path` , `build/@autogenerated_${PROJECT_NAME}.pack`, 
       `-t`, `${schemaPath}`,
       `--folder-path`, `temp`
  ], 
  { encoding: 'utf8', stdio: 'inherit' })
  console.log(`cleaning up`)
  fs.rmSync(`temp/`, { recursive: true })

}

//compile stage
BuildTypescriptProject()

//packing stage
InjectResourcesPack()

console.log(`Complete`)


